{"version":3,"sources":["components/AddCategory.js","helpers/getGifs.js","components/GifGridItem.js","components/GifGrid.js","hooks/useFetchGifs.js","GifExpertApp.js","index.js"],"names":["AddCategory","setCategories","useState","inputValue","setInputValue","onSubmit","e","preventDefault","trim","length","cats","type","value","onChange","console","log","target","getGifs","category","a","url","encodeURI","fetch","resp","json","data","gifs","map","img","id","title","images","downsized_medium","GifGridItem","className","src","alt","GifGrid","loading","state","setState","useEffect","then","imgs","useFetchGifs","GifExpertApp","categories","ReactDOM","render","document","getElementById"],"mappings":"mMAGaA,EAAc,SAAC,GAAsB,IAApBC,EAAmB,EAAnBA,cAE1B,EAAoCC,mBAAS,IAA7C,mBAAOC,EAAP,KAAmBC,EAAnB,KAgBA,OACI,sBAAMC,SAVW,SAACC,GAClBA,EAAEC,iBAEEJ,EAAWK,OAAOC,OAAS,IAC3BR,GAAe,SAAAS,GAAI,OAAKP,GAAL,mBAAoBO,OACvCN,EAAc,MAKlB,SAEI,uBACIO,KAAK,OACLC,MAAQT,EACRU,SApBc,SAACP,GACvBQ,QAAQC,IAAIT,EAAEU,OAAOJ,OACrBR,EAAcE,EAAEU,OAAOJ,a,+BCTlBK,EAAO,uCAAG,WAAMC,GAAN,uBAAAC,EAAA,6DACbC,EADa,iDACmCC,UAAUH,GAD7C,sDAEAI,MAAMF,GAFN,cAEbG,EAFa,gBAGEA,EAAKC,OAHP,uBAGZC,EAHY,EAGZA,KACDC,EAAOD,EAAKE,KAAI,SAAAC,GAAM,IAAD,EACvB,MAAO,CACHC,GAAID,EAAIC,GACRC,MAAOF,EAAIE,MACXV,IAAG,UAAEQ,EAAIG,cAAN,aAAE,EAAYC,iBAAiBZ,QARvB,kBAaZM,GAbY,4CAAH,sDCKPO,EAAc,SAAC,GAAuB,EAArBJ,GAAsB,IAAlBC,EAAiB,EAAjBA,MAAOV,EAAU,EAAVA,IAErC,OACI,sBAAKc,UAAU,yCAAf,UACI,qBAAKC,IAAMf,EAAMgB,IAAMN,IACvB,4BAAKA,QCNJO,EAAU,SAAC,GAAiB,IAAfnB,EAAc,EAAdA,SAEtB,ECEwB,SAACA,GACzB,MAA0BhB,mBAAS,CAC/BuB,KAAK,GACLa,SAAS,IAFb,mBAAOC,EAAP,KAAcC,EAAd,KAmBA,OAdDC,qBAAW,WAENxB,EAASC,GACRwB,MAAM,SAAAC,GAEHH,EAAS,CACLf,KAAMkB,EACNL,SAAS,SAKnB,CAACpB,IAEIqB,EDtBwBK,CAAa1B,GAAhCa,EAAZ,EAAON,KAAaa,EAApB,EAAoBA,QAEpB,OACI,qCACA,oBAAIJ,UAAU,oCAAd,SAAmDhB,IAEjDoB,GAAW,mBAAGJ,UAAU,mCAAb,qBAEb,qBAAKA,UAAU,YAAf,SAEYH,EAAOJ,KAAK,SAACC,GAAD,OACR,cAAC,EAAD,eAGQA,GAFCA,EAAIC,aEdxBgB,EAAe,WAGxB,MAAoC3C,mBAAS,CAAC,cAA9C,mBAAO4C,EAAP,KAAmB7C,EAAnB,KAUA,OACI,qCACI,8CACA,cAAC,EAAD,CAAaA,cAAeA,IAE5B,uBAEA,6BAEQ6C,EAAWnB,KAAK,SAAAT,GAAQ,OACpB,cAAC,EAAD,CAEIA,SAAUA,GADLA,Y,MCrBjC6B,IAASC,OACL,cAAC,EAAD,IACFC,SAASC,eAAe,W","file":"static/js/main.b3698d6b.chunk.js","sourcesContent":["import React, { useState } from 'react';\nimport PropTypes from \"prop-types\"\n\nexport const AddCategory = ( {setCategories}) => {\n\n    const [inputValue, setInputValue] = useState(\"\"); //Si no hay valor en useState es undefined\n\n    const handleInputChange = (e) => {\n        console.log(e.target.value)\n        setInputValue(e.target.value);\n    };\n\n    const handleSubmit = (e) => {\n        e.preventDefault();\n\n        if (inputValue.trim().length > 2) {\n            setCategories( cats => [inputValue, ...cats ]);    \n            setInputValue(\"\");\n        }\n    }\n\n    return (\n        <form onSubmit={handleSubmit}>\n            \n            <input\n                type=\"text\"\n                value={ inputValue}\n                onChange= { handleInputChange }\n            />\n        </form>\n    )\n}\n\nAddCategory.propTypes = {\n    setCategories: PropTypes.func.isRequired\n}","export const getGifs = async(category) => {\n    const url =`https://api.giphy.com/v1/gifs/search?q=${ encodeURI(category) }&api_key=WcoQolOwvQoMxA2q0oFiAuHHAf8ab6Tg`;\n    const resp = await fetch(url);\n    const {data} = await resp.json();\n    const gifs = data.map(img=>{\n        return {\n            id: img.id,\n            title: img.title,\n            url: img.images?.downsized_medium.url\n        }\n    });\n\n\n    return gifs;\n\n}","/*\nComponente para renderizar un item, recibe valores desestrructurados en el origen\n*/\nimport React from 'react'\n\nexport const GifGridItem = ( {id, title, url} ) => {\n    \n    return (\n        <div className=\"card animate__animated animate__fadeIn\">\n            <img src={ url } alt={ title } />\n            <p>{ title }</p>\n        </div>\n    )\n}\n","import React  from 'react'\nimport { useFetchGifs } from '../hooks/useFetchGifs'\nimport { GifGridItem } from './GifGridItem';\n\nexport const GifGrid = ( {category}) => {\n\n    const {data:images, loading} = useFetchGifs(category); //Custom hook\n    \n    return (\n        <>\n        <h3 className=\"animate__animated animate__fadeIn\">{category}</h3>\n\n        { loading && <p className=\"animate__animated animate__flash\">Loading</p> } \n\n        <div className=\"card-grid\">\n                {\n                    images.map( (img) => (\n                        <GifGridItem \n                            key={img.id}\n                            // img={img}\n                            {...img} //una forma de desestructurar GifGridItem recibe valores individuales\n                        />\n                        ))\n                }\n        </div>\n        </>\n    )\n}\n","/*\nCustom hook\nRealiza el trabajao pesado de obtencion de informacion de la API\nEs llamado por GifGrid.js\n*/\nimport { useEffect, useState } from \"react\"\nimport {getGifs} from '../helpers/getGifs';\n\nexport const useFetchGifs = (category) => {\n    const [state, setState] = useState({\n        data:[],\n        loading: true\n    })\n\n   useEffect( () => {\n\n        getGifs( category )\n        .then( imgs => {\n\n            setState({\n                data: imgs,\n                loading: false\n            });\n\n        });\n        \n   }, [category])\n\n    return state; // Este es el formato que tiene el state -> {data:[], loading: true}\n}\n","import React, { useState } from 'react'\nimport { AddCategory } from './components/AddCategory'\nimport { GifGrid } from './components/GifGrid'\n\nexport const GifExpertApp = () => {\n\n    // Constante con las categorias a manejar\n    const [categories, setCategories] = useState(['One Punch'])\n\n    //Evento del boton Agregar\n    // const handleAdd = () => {\n\n    //     //categories.push('Hunter'); error\n    //     //setCategories(['Hunter', ...categories]); // Forma correcta, existe otra mejor (ya veremos)\n    //     setCategories( cats => [...cats, 'Hunter2']);\n    // }\n\n    return (\n        <>\n            <h2>GifExpertApp</h2>\n            <AddCategory setCategories={setCategories}/>\n\n            <hr />\n\n            <ol>\n                {\n                    categories.map( category => (\n                        <GifGrid \n                            key={category}\n                            category={category}\n                        />\n                    ))\n                }\n            </ol>\n        </>\n    )\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { GifExpertApp } from './GifExpertApp';\n\nimport './index.css';\n\n\nReactDOM.render(\n    <GifExpertApp />,\n  document.getElementById('root')\n);\n\n\n"],"sourceRoot":""}